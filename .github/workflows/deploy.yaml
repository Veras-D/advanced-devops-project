name: Pipeline CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  build-ecr:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      image_tag: ${{ steps.build.outputs.image_tag }}
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: arn:aws:iam::123456789012:role/gitHubActionsECR
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: prod
          ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
        run: |
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_TAG=${ENVIRONMENT}-${COMMIT_SHA}
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_uri=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-ssm:
    runs-on: ubuntu-latest
    needs: build-ecr
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: arn:aws:iam::123456789012:role/gitHubActionsDeployRole
          aws-region: us-east-1

      - name: Find EC2 Instance ID
        id: find_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=ec2_prod" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via SSM
        uses: aws-actions/aws-ssm-send-command@v1
        with:
          instance-ids: ${{ steps.find_instance.outputs.instance_id }}
          comment: "Deploying new image ${{ needs.build-ecr.outputs.image_uri }}"
          commands: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ needs.build-ecr.outputs.registry }}
            echo "Pulling image ${{ needs.build-ecr.outputs.image_uri }}"
            docker pull ${{ needs.build-ecr.outputs.image_uri }}
            echo "Stopping and removing old container"
            docker stop site || true
            docker rm site || true
            echo "Starting new container"
            docker run -d -p 80:80 --name site ${{ needs.build-ecr.outputs.image_uri }}
            echo "Deployment finished"